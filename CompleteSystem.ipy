#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#%display latex

import sage.all
from sage.calculus.var import var, function
from sage.calculus.functional import diff
from delierium.JanetBasis import (
    multipliers, Differential_Polynomial, Reorder, CompleteSystem)
from delierium.MatrixOrder import Context, Mlex, Mgrlex, Mgrevlex
from delierium.helpers import vector_to_monomial, eq
from IPython.core.debugger import set_trace
import functools
from delierium.JanetBasis import derivative_to_vec
from functools import cmp_to_key

t=x1,x2,x3=var("x1 x2 x3")
f       = function("f")(*t)
M=[x1*x1*x2*x2*x3**3, x1**3 * x3**3, x1**3 * x2*x3, x2*x3]


def complete(m, context = None):
    '''
    Given a set {m1,m2,...} of monomials, the complete set corresponding to m is returned
    >>> x1,x2,x3=var("x1 x2 x3")
    >>>
    >>> f       = function("f")(x1,x2,x3)
    >>> M=[x1*x1*x2*x2*x3**3, x1**3 * x3**3, x1**3 * x2*x3, x2*x3]
    [ x1*x2^2*x3^3,x1^3*x3^3,x1^2*x2*x3^2,x2^2*x3^3, x1^2*x2*x3^3, x1*x2*x3, x1^2*x2*x3,
    x1^3*x2*x3,x2*x3^2,x1*x2*x3^2,x1^2*x2^2*x3^3,x1^3*x2*x3^2,x2*x3^3, x1*x2*x3^3, x1^3*x2*x3^3, x2*x3]
    '''
    loc = m[:]
    vars =  context._independent[:]
    counter = 0
    while 1:
        counter += 1
        # S1: find multipliers and nonmultipliers
        res = [(_, multipliers(_, tuple(loc), tuple(vars))) for _ in loc]
        m0  = []
        # S2: product with nonmultipliers
        for (monomial, (_multipliers, _nonmultipliers)) in res:
            if not _nonmultipliers:
                m0 += [monomial]
            else:
                m0 += [monomial * n for n in _nonmultipliers]
        to_remove = []
        for _m0  in m0:
            # S3: check whether in class of any of the monomials
            for (monomial, (_multipliers, _nonmultipliers)) in res:
                if all(_m0.degree(x) >= monomial.degree(x) for x in _multipliers)  and \
                   all(_m0.degree(x) == monomial.degree(x) for x in _nonmultipliers):
                    # this is in _m0's class
                    to_remove.append(_m0)
        for _to in to_remove:
            try:
                m0.remove(_to)
            except:
                pass
        if not m0:
            return [(_, multipliers(_, tuple(loc), tuple(vars))) for _ in loc]
        loc.extend(sorted(list(set(m0))))


#ctx=Context((f,), tuple(_ for _ in reversed(t)))
#M=[x1*x1*x2*x2*x3**3, x1**3 * x3**3, x1**3 * x2*x3, x2*x3]
#c=complete (M, ctx)

#from pprint import pprint
#pprint(c)

#vars = var ("x y")
#z = function("z")(*vars)
#w = function("w")(*vars)
# ctx: items are in descending order ?
#ctx = Context((w,z), vars, Mlex)
#g1=diff(z,y,y)
#g2=diff(w,x,x)
#g3=diff(w,x,y)
#g4=diff(w,y,y)




#cs=CompleteSystem([Differential_Polynomial(_, ctx) for _ in [g1,g2,g3,g4]], ctx)


#def complete_with_DPs(dps, ctx):
#    pass


%load_ext snakeviz


tvars=var("x y z")
w = function("w")(*tvars)
# these DPs are constructed from C1, pp 384
h1=diff(w, x,x,x, y,y,z,z)
h2=diff(w, x,x,x,     z,z,z)
h3=diff(w, x,     y,  z,z,z)
h4=diff(w, x,     y)
ctx=Context((w,),(x,y,z), Mgrlex)

#%snakeviz
dps=[Differential_Polynomial(_, ctx) for _ in [h1,h2,h3,h4]]


#%snakeviz
cs = CompleteSystem(dps, ctx)

#print(eq.cache_info())

for _ in cs:
    _.show()
